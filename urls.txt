http://127.0.0.1:8000/api/users/ (for users)
http://127.0.0.1:8000/api/companies/ (for companies)
http://127.0.0.1:8000/api/departments/ (for departments)
http://127.0.0.1:8000/api/employees/ (for employees)




from django.contrib.auth.models import User

# ✅ Create an Admin User (Superuser)
admin_user = User.objects.create(username="adminuser", email="admin@example.com", is_superuser=True, is_staff=True)
admin_user.set_password("admin123")
admin_user.save()

# ✅ Create a Regular Employee (Non-Superuser)
employee_user = User.objects.create(username="employee1", email="emp@example.com")
employee_user.set_password("employee123")
employee_user.save()



Role	is_superuser	is_staff	Permissions
Admin (Superuser)	✅ True	✅ True	Full access to everything
Regular Employee	❌ False	❌ False	Limited access
This approach: ✅ Uses Django’s built-in User model
✅ Removes the need for a custom role field
✅ Uses is_superuser for admin control
✅ Prevents users from setting their own admin status

Let me know if you need any modifications! 🚀






from rest_framework import serializers
from django.contrib.auth.models import User
from django.contrib.auth.hashers import make_password

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'password', 'is_superuser']
        extra_kwargs = {
            'password': {'write_only': True, 'required': False},  # Password optional for updates
            'is_superuser': {'read_only': True}
        }

    def create(self, validated_data):
        """Create user and hash password"""
        if 'password' not in validated_data:
            raise serializers.ValidationError({"password": "This field is required."})
        
        validated_data['password'] = make_password(validated_data['password'])
        return super().create(validated_data)

    def update(self, instance, validated_data):
        """Update user, hash password if changed"""
        password = validated_data.pop('password', None)

        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        if password:
            instance.password = make_password(password)

        instance.save()
        return instance

    def validate_email(self, value):
        """Ensure email is unique only when changing to a new one"""
        if self.instance:  # If updating
            if User.objects.exclude(id=self.instance.id).filter(email=value).exists():
                raise serializers.ValidationError("This email is already in use.")
        else:  # If creating
            if User.objects.filter(email=value).exists():
                raise serializers.ValidationError("This email is already in use.")
        return value
